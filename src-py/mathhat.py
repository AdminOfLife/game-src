# This file was automatically generated by SWIG (http://www.swig.org).
# Version 1.3.31
#
# Don't modify this file, modify the SWIG interface instead.
# This file is compatible with both classic and new-style classes.

import _mathhat
import new
new_instancemethod = new.instancemethod
try:
    _swig_property = property
except NameError:
    pass # Python < 2.2 doesn't have 'property'.
def _swig_setattr_nondynamic(self,class_type,name,value,static=1):
    if (name == "thisown"): return self.this.own(value)
    if (name == "this"):
        if type(value).__name__ == 'PySwigObject':
            self.__dict__[name] = value
            return
    method = class_type.__swig_setmethods__.get(name,None)
    if method: return method(self,value)
    if (not static) or hasattr(self,name):
        self.__dict__[name] = value
    else:
        raise AttributeError("You cannot add attributes to %s" % self)

def _swig_setattr(self,class_type,name,value):
    return _swig_setattr_nondynamic(self,class_type,name,value,0)

def _swig_getattr(self,class_type,name):
    if (name == "thisown"): return self.this.own()
    method = class_type.__swig_getmethods__.get(name,None)
    if method: return method(self)
    raise AttributeError,name

def _swig_repr(self):
    try: strthis = "proxy of " + self.this.__repr__()
    except: strthis = ""
    return "<%s.%s; %s >" % (self.__class__.__module__, self.__class__.__name__, strthis,)

import types
try:
    _object = types.ObjectType
    _newclass = 1
except AttributeError:
    class _object : pass
    _newclass = 0
del types


class Plane(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, Plane, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, Plane, name)
    __repr__ = _swig_repr
    __swig_setmethods__["a"] = _mathhat.Plane_a_set
    __swig_getmethods__["a"] = _mathhat.Plane_a_get
    if _newclass:a = _swig_property(_mathhat.Plane_a_get, _mathhat.Plane_a_set)
    __swig_setmethods__["b"] = _mathhat.Plane_b_set
    __swig_getmethods__["b"] = _mathhat.Plane_b_get
    if _newclass:b = _swig_property(_mathhat.Plane_b_get, _mathhat.Plane_b_set)
    __swig_setmethods__["c"] = _mathhat.Plane_c_set
    __swig_getmethods__["c"] = _mathhat.Plane_c_get
    if _newclass:c = _swig_property(_mathhat.Plane_c_get, _mathhat.Plane_c_set)
    __swig_setmethods__["d"] = _mathhat.Plane_d_set
    __swig_getmethods__["d"] = _mathhat.Plane_d_get
    if _newclass:d = _swig_property(_mathhat.Plane_d_get, _mathhat.Plane_d_set)
    def __init__(self, *args): 
        this = _mathhat.new_Plane(*args)
        try: self.this.append(this)
        except: self.this = this
    def normalize(*args): return _mathhat.Plane_normalize(*args)
    def distanceToPoint(*args): return _mathhat.Plane_distanceToPoint(*args)
    __swig_destroy__ = _mathhat.delete_Plane
    __del__ = lambda self : None;
Plane_swigregister = _mathhat.Plane_swigregister
Plane_swigregister(Plane)

class Frustrum(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, Frustrum, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, Frustrum, name)
    __repr__ = _swig_repr
    __swig_setmethods__["planes"] = _mathhat.Frustrum_planes_set
    __swig_getmethods__["planes"] = _mathhat.Frustrum_planes_get
    if _newclass:planes = _swig_property(_mathhat.Frustrum_planes_get, _mathhat.Frustrum_planes_set)
    def __init__(self, *args): 
        this = _mathhat.new_Frustrum(*args)
        try: self.this.append(this)
        except: self.this = this
    def update(*args): return _mathhat.Frustrum_update(*args)
    def sphereInFrustrum(*args): return _mathhat.Frustrum_sphereInFrustrum(*args)
    __swig_destroy__ = _mathhat.delete_Frustrum
    __del__ = lambda self : None;
Frustrum_swigregister = _mathhat.Frustrum_swigregister
Frustrum_swigregister(Frustrum)

SV_TOTAL = _mathhat.SV_TOTAL
SV_PARTIAL = _mathhat.SV_PARTIAL
SV_NONE = _mathhat.SV_NONE
class VisSphere(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, VisSphere, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, VisSphere, name)
    __repr__ = _swig_repr
    __swig_setmethods__["cx"] = _mathhat.VisSphere_cx_set
    __swig_getmethods__["cx"] = _mathhat.VisSphere_cx_get
    if _newclass:cx = _swig_property(_mathhat.VisSphere_cx_get, _mathhat.VisSphere_cx_set)
    __swig_setmethods__["cy"] = _mathhat.VisSphere_cy_set
    __swig_getmethods__["cy"] = _mathhat.VisSphere_cy_get
    if _newclass:cy = _swig_property(_mathhat.VisSphere_cy_get, _mathhat.VisSphere_cy_set)
    __swig_setmethods__["cz"] = _mathhat.VisSphere_cz_set
    __swig_getmethods__["cz"] = _mathhat.VisSphere_cz_get
    if _newclass:cz = _swig_property(_mathhat.VisSphere_cz_get, _mathhat.VisSphere_cz_set)
    __swig_setmethods__["radius"] = _mathhat.VisSphere_radius_set
    __swig_getmethods__["radius"] = _mathhat.VisSphere_radius_get
    if _newclass:radius = _swig_property(_mathhat.VisSphere_radius_get, _mathhat.VisSphere_radius_set)
    __swig_setmethods__["vis"] = _mathhat.VisSphere_vis_set
    __swig_getmethods__["vis"] = _mathhat.VisSphere_vis_get
    if _newclass:vis = _swig_property(_mathhat.VisSphere_vis_get, _mathhat.VisSphere_vis_set)
    __swig_setmethods__["userRef"] = _mathhat.VisSphere_userRef_set
    __swig_getmethods__["userRef"] = _mathhat.VisSphere_userRef_get
    if _newclass:userRef = _swig_property(_mathhat.VisSphere_userRef_get, _mathhat.VisSphere_userRef_set)
    def __init__(self, *args): 
        this = _mathhat.new_VisSphere(*args)
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _mathhat.delete_VisSphere
    __del__ = lambda self : None;
    def updateLocation(*args): return _mathhat.VisSphere_updateLocation(*args)
    def visible(*args): return _mathhat.VisSphere_visible(*args)
VisSphere_swigregister = _mathhat.VisSphere_swigregister
VisSphere_swigregister(VisSphere)

class SphereVisChecker(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, SphereVisChecker, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, SphereVisChecker, name)
    __repr__ = _swig_repr
    __swig_setmethods__["spheres"] = _mathhat.SphereVisChecker_spheres_set
    __swig_getmethods__["spheres"] = _mathhat.SphereVisChecker_spheres_get
    if _newclass:spheres = _swig_property(_mathhat.SphereVisChecker_spheres_get, _mathhat.SphereVisChecker_spheres_set)
    __swig_destroy__ = _mathhat.delete_SphereVisChecker
    __del__ = lambda self : None;
    def addSphere(*args): return _mathhat.SphereVisChecker_addSphere(*args)
    def markVisibleSpheres(*args): return _mathhat.SphereVisChecker_markVisibleSpheres(*args)
    def __init__(self, *args): 
        this = _mathhat.new_SphereVisChecker(*args)
        try: self.this.append(this)
        except: self.this = this
SphereVisChecker_swigregister = _mathhat.SphereVisChecker_swigregister
SphereVisChecker_swigregister(SphereVisChecker)

class Node(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, Node, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, Node, name)
    __repr__ = _swig_repr
    __swig_setmethods__["x"] = _mathhat.Node_x_set
    __swig_getmethods__["x"] = _mathhat.Node_x_get
    if _newclass:x = _swig_property(_mathhat.Node_x_get, _mathhat.Node_x_set)
    __swig_setmethods__["y"] = _mathhat.Node_y_set
    __swig_getmethods__["y"] = _mathhat.Node_y_get
    if _newclass:y = _swig_property(_mathhat.Node_y_get, _mathhat.Node_y_set)
    __swig_setmethods__["index"] = _mathhat.Node_index_set
    __swig_getmethods__["index"] = _mathhat.Node_index_get
    if _newclass:index = _swig_property(_mathhat.Node_index_get, _mathhat.Node_index_set)
    __swig_setmethods__["impassable"] = _mathhat.Node_impassable_set
    __swig_getmethods__["impassable"] = _mathhat.Node_impassable_get
    if _newclass:impassable = _swig_property(_mathhat.Node_impassable_get, _mathhat.Node_impassable_set)
    __swig_setmethods__["f"] = _mathhat.Node_f_set
    __swig_getmethods__["f"] = _mathhat.Node_f_get
    if _newclass:f = _swig_property(_mathhat.Node_f_get, _mathhat.Node_f_set)
    __swig_setmethods__["g"] = _mathhat.Node_g_set
    __swig_getmethods__["g"] = _mathhat.Node_g_get
    if _newclass:g = _swig_property(_mathhat.Node_g_get, _mathhat.Node_g_set)
    __swig_setmethods__["h"] = _mathhat.Node_h_set
    __swig_getmethods__["h"] = _mathhat.Node_h_get
    if _newclass:h = _swig_property(_mathhat.Node_h_get, _mathhat.Node_h_set)
    __swig_setmethods__["adjacent"] = _mathhat.Node_adjacent_set
    __swig_getmethods__["adjacent"] = _mathhat.Node_adjacent_get
    if _newclass:adjacent = _swig_property(_mathhat.Node_adjacent_get, _mathhat.Node_adjacent_set)
    def __init__(self, *args): 
        this = _mathhat.new_Node(*args)
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _mathhat.delete_Node
    __del__ = lambda self : None;
Node_swigregister = _mathhat.Node_swigregister
Node_swigregister(Node)

class AStarMap(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, AStarMap, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, AStarMap, name)
    __repr__ = _swig_repr
    def __init__(self, *args): 
        this = _mathhat.new_AStarMap(*args)
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _mathhat.delete_AStarMap
    __del__ = lambda self : None;
    def computeAdjacency(*args): return _mathhat.AStarMap_computeAdjacency(*args)
    def path(*args): return _mathhat.AStarMap_path(*args)
    def printMask(*args): return _mathhat.AStarMap_printMask(*args)
AStarMap_swigregister = _mathhat.AStarMap_swigregister
AStarMap_swigregister(AStarMap)



